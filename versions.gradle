/*
 * Copyright (C) 2018 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


/**
 * Shared file between builds so that they can all use the same dependencies and
 * maven repositories.
 **/
ext.deps = [:]
def versions = [:]
versions.android_gradle_plugin = '3.5.2'
versions.banner = '1.4.10'
versions.appcompat = "1.1.0"
versions.dagger = "2.25.2"
versions.kotlin = "1.3.50"
versions.kotlinx_coroutines = "1.3.0"
versions.lifecycle = "2.2.0-alpha03"
versions.navigation = "2.1.0"
versions.workmanager = "2.2.0"
versions.paging = "2.1.0"
versions.room = "2.2.2"
versions.webkit = "1.1.0"
versions.lifecycle_saveStated = "1.0.0-rc02"
versions.support = "1.2.0-alpha02"
versions.glide = "4.8.0"
versions.fragment = "1.2.0-alpha02"
versions.multidex = "2.0.1"
versions.constraint_layout = "1.1.3"
versions.okhttp3 = "3.11.0"
versions.retrofit = "2.6.0"
versions.brvah ="2.9.50"
versions.smartrefresh = "1.1.0-andx-11"
versions.agentweb = "4.1.2"
ext.versions = versions

deps.brvah = "com.github.CymChad:BaseRecyclerViewAdapterHelper:$versions.brvah"
deps.banner = "com.youth.banner:banner:$versions.banner"
deps.okhttp3 = "com.squareup.okhttp3:logging-interceptor:$versions.okhttp3"
deps.constraint_layout = "androidx.constraintlayout:constraintlayout:$versions.constraint_layout"
deps.android_gradle_plugin = "com.android.tools.build:gradle:$versions.android_gradle_plugin"
deps.agentweb = "com.just.agentweb:agentweb:$versions.agentweb"
ext.deps = deps

def lifecycle = [:]
lifecycle.runtime = "androidx.lifecycle:lifecycle-runtime:$versions.lifecycle"
lifecycle.java8 = "androidx.lifecycle:lifecycle-common-java8:$versions.lifecycle"
lifecycle.compiler = "androidx.lifecycle:lifecycle-compiler:$versions.lifecycle"
lifecycle.viewmodel_ktx = "androidx.lifecycle:lifecycle-viewmodel-ktx:$versions.lifecycle"
lifecycle.livedata_ktx = "androidx.lifecycle:lifecycle-livedata-ktx:$versions.lifecycle"
lifecycle.reactivestreams_ktx =  "androidx.lifecycle:lifecycle-reactivestreams-ktx:$versions.lifecycle"
lifecycle.extensions = "androidx.lifecycle:lifecycle-extensions:$versions.lifecycle"
lifecycle.savedstate = "androidx.lifecycle:lifecycle-viewmodel-savedstate:$versions.lifecycle_saveStated"
deps.lifecycle = lifecycle

def navigation = [:]
navigation.runtime = "androidx.navigation:navigation-runtime:$versions.navigation"
navigation.runtime_ktx = "androidx.navigation:navigation-runtime-ktx:$versions.navigation"
navigation.fragment = "androidx.navigation:navigation-fragment:$versions.navigation"
navigation.fragment_ktx = "androidx.navigation:navigation-fragment-ktx:$versions.navigation"
navigation.ui = "androidx.navigation:navigation-ui:$versions.navigation"
navigation.ui_ktx = "androidx.navigation:navigation-ui-ktx:$versions.navigation"
navigation.safe_args_plugin = "androidx.navigation:navigation-safe-args-gradle-plugin:$versions.navigation"
deps.navigation = navigation

def workManager = [:]
workManager.runtime_ktx =  "androidx.work:work-runtime-ktx:$versions.workmanager"
workManager.work_rxjava2 =  "androidx.work:work-rxjava2:$versions.workmanager"
workManager.work_gcm =  "androidx.work:work-gcm:$versions.workmanager"
deps.workManager = workManager

def paging = [:]
paging.runtime_ktx =  "androidx.paging:paging-runtime-ktx:$versions.paging"
deps.paging = paging

def room = [:]
room.runtime = "androidx.room:room-runtime:$versions.room"
room.rxjava2 = "androidx.room:room-rxjava2:$versions.room"
room.compiler = "androidx.room:room-compiler:$versions.room"
deps.room = room

def kotlin = [:]
kotlin.stdlib = "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$versions.kotlin"
kotlin.test = "org.jetbrains.kotlin:kotlin-test-junit:$versions.kotlin"
kotlin.plugin = "org.jetbrains.kotlin:kotlin-gradle-plugin:$versions.kotlin"
kotlin.allopen = "org.jetbrains.kotlin:kotlin-allopen:$versions.kotlin"
kotlin.kotlinx_coroutines = "org.jetbrains.kotlinx:kotlinx-coroutines-android:${versions.kotlinx_coroutines}"
deps.kotlin = kotlin

def support = [:]
support.annotations = "androidx.annotation:annotation:$versions.support"
support.app_compat = "androidx.appcompat:appcompat:$versions.appcompat"
support.recyclerview = "androidx.recyclerview:recyclerview:$versions.support"
support.cardview = "androidx.cardview:cardview:$versions.support"
support.design = "com.google.android.material:material:$versions.support"
support.core_utils = "androidx.legacy:legacy-support-core-utils:$versions.support"
support.core_ktx = "androidx.core:core-ktx:$versions.core_ktx"
support.webkit = "androidx.webkit:webkit:$versions.webkit"
support.fragment_ktx = "androidx.fragment:fragment-ktx:${versions.fragment}"
support.multidex = "androidx.multidex:multidex:${versions.multidex}"
deps.support = support

def glide = [:]
glide.runtime = "com.github.bumptech.glide:glide:$versions.glide"
glide.compiler = "com.github.bumptech.glide:compiler:$versions.glide"
deps.glide = glide

def retrofit = [:]
retrofit.retrofit2 =  "com.squareup.retrofit2:retrofit:$versions.retrofit"
retrofit.converter_gson = "com.squareup.retrofit2:converter-gson:$versions.retrofit"
retrofit.runtime = "com.squareup.retrofit2:retrofit:$versions.retrofit"
deps.retrofit = retrofit

def dagger = [:]
dagger.runtime = "com.google.dagger:dagger:$versions.dagger"
dagger.android = "com.google.dagger:dagger-android:$versions.dagger"
dagger.android_support = "com.google.dagger:dagger-android-support:$versions.dagger"
dagger.compiler = "com.google.dagger:dagger-compiler:$versions.dagger"
dagger.android_support_compiler = "com.google.dagger:dagger-android-processor:$versions.dagger"
deps.dagger = dagger

def smartrefresh = [:]
smartrefresh.SmartRefreshLayout = "com.scwang.smartrefresh:SmartRefreshLayout:$versions.smartrefresh"
smartrefresh.SmartRefreshLayoutHead = "com.scwang.smartrefresh:SmartRefreshHeader:$versions.smartrefresh"
deps.smartrefresh = smartrefresh

def addRepos(RepositoryHandler handler) {
    handler.google()
    handler.jcenter()
    handler.maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
    handler.maven { url "https://jitpack.io" }
}
ext.addRepos = this.&addRepos